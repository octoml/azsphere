v0.0.4
def @main(%Mfcc: Tensor[(1, 49, 10), float32]) -> Tensor[(1, 12), float32] {
  %0 = reshape(%Mfcc, newshape=[-1, 490]) /* ty=Tensor[(1, 490), float32] */;
  %1 = reshape(%0, newshape=[-1, 49, 10, 1]) /* ty=Tensor[(1, 49, 10, 1), float32] */;
  %2 = transpose(%1, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 1, 49, 10), float32] */;
  %3 = multiply(%2, 32f /* ty=float32 */) /* ty=Tensor[(1, 1, 49, 10), float32] */;
  %4 = round(%3) /* ty=Tensor[(1, 1, 49, 10), float32] */;
  %5 = clip(%4, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1, 49, 10), float32] */;
  %6 = cast(%5, dtype="int8") /* ty=Tensor[(1, 1, 49, 10), int8] */;
  %7 = nn.conv2d(%6, meta[relay.Constant][0] /* ty=Tensor[(64, 1, 10, 4), int8] */ /* ty=Tensor[(64, 1, 10, 4), int8] */, strides=[2, 2], padding=[4, 1, 5, 1], channels=64, kernel_size=[10, 4], out_dtype="int32") /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %8 = add(%7, 256 /* ty=int32 */) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %9 = right_shift(%8, 9 /* ty=int32 */) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %10 = clip(%9, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %11 = cast(%10, dtype="int8") /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %12 = annotation.stop_fusion(%11) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %13 = cast(%12, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %14 = multiply(%13, 0.03125f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %15 = transpose(%14, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %16 = add(%15, meta[relay.Constant][1] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %17 = multiply(%16, meta[relay.Constant][2] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %18 = add(%17, meta[relay.Constant][3] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %19 = nn.relu(%18) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %20 = transpose(%19, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %21 = multiply(%20, 32f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %22 = round(%21) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %23 = clip(%22, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %24 = cast(%23, dtype="int8") /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %25 = nn.conv2d(%24, meta[relay.Constant][4] /* ty=Tensor[(64, 1, 3, 3), int8] */ /* ty=Tensor[(64, 1, 3, 3), int8] */, padding=[1, 1, 1, 1], groups=64, channels=64, kernel_size=[3, 3], out_dtype="int32") /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %26 = add(%25, 256 /* ty=int32 */) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %27 = right_shift(%26, 9 /* ty=int32 */) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %28 = clip(%27, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %29 = cast(%28, dtype="int8") /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %30 = annotation.stop_fusion(%29) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %31 = cast(%30, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %32 = multiply(%31, 0.03125f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %33 = transpose(%32, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %34 = add(%33, meta[relay.Constant][5] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %35 = multiply(%34, meta[relay.Constant][6] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %36 = add(%35, meta[relay.Constant][7] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %37 = nn.relu(%36) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %38 = transpose(%37, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %39 = multiply(%38, 32f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %40 = round(%39) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %41 = clip(%40, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %42 = cast(%41, dtype="int8") /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %43 = nn.conv2d(%42, meta[relay.Constant][8] /* ty=Tensor[(64, 64, 1, 1), int8] */ /* ty=Tensor[(64, 64, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], out_dtype="int32") /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %44 = add(%43, 128 /* ty=int32 */) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %45 = right_shift(%44, 8 /* ty=int32 */) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %46 = clip(%45, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %47 = cast(%46, dtype="int8") /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %48 = annotation.stop_fusion(%47) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %49 = cast(%48, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %50 = multiply(%49, 0.03125f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %51 = transpose(%50, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %52 = add(%51, meta[relay.Constant][9] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %53 = multiply(%52, meta[relay.Constant][10] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %54 = add(%53, meta[relay.Constant][11] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %55 = nn.relu(%54) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %56 = transpose(%55, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %57 = multiply(%56, 32f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %58 = round(%57) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %59 = clip(%58, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %60 = cast(%59, dtype="int8") /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %61 = nn.conv2d(%60, meta[relay.Constant][12] /* ty=Tensor[(64, 1, 3, 3), int8] */ /* ty=Tensor[(64, 1, 3, 3), int8] */, padding=[1, 1, 1, 1], groups=64, channels=64, kernel_size=[3, 3], out_dtype="int32") /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %62 = add(%61, 128 /* ty=int32 */) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %63 = right_shift(%62, 8 /* ty=int32 */) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %64 = clip(%63, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %65 = cast(%64, dtype="int8") /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %66 = annotation.stop_fusion(%65) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %67 = cast(%66, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %68 = multiply(%67, 0.03125f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %69 = transpose(%68, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %70 = add(%69, meta[relay.Constant][13] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %71 = multiply(%70, meta[relay.Constant][14] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %72 = add(%71, meta[relay.Constant][15] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %73 = nn.relu(%72) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %74 = transpose(%73, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %75 = multiply(%74, 32f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %76 = round(%75) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %77 = clip(%76, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %78 = cast(%77, dtype="int8") /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %79 = nn.conv2d(%78, meta[relay.Constant][16] /* ty=Tensor[(64, 64, 1, 1), int8] */ /* ty=Tensor[(64, 64, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], out_dtype="int32") /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %80 = add(%79, 64 /* ty=int32 */) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %81 = right_shift(%80, 7 /* ty=int32 */) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %82 = clip(%81, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %83 = cast(%82, dtype="int8") /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %84 = annotation.stop_fusion(%83) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %85 = cast(%84, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %86 = multiply(%85, 0.03125f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %87 = transpose(%86, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %88 = add(%87, meta[relay.Constant][17] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %89 = multiply(%88, meta[relay.Constant][18] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %90 = add(%89, meta[relay.Constant][19] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %91 = nn.relu(%90) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %92 = transpose(%91, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %93 = multiply(%92, 32f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %94 = round(%93) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %95 = clip(%94, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %96 = cast(%95, dtype="int8") /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %97 = nn.conv2d(%96, meta[relay.Constant][20] /* ty=Tensor[(64, 1, 3, 3), int8] */ /* ty=Tensor[(64, 1, 3, 3), int8] */, padding=[1, 1, 1, 1], groups=64, channels=64, kernel_size=[3, 3], out_dtype="int32") /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %98 = add(%97, 128 /* ty=int32 */) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %99 = right_shift(%98, 8 /* ty=int32 */) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %100 = clip(%99, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %101 = cast(%100, dtype="int8") /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %102 = annotation.stop_fusion(%101) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %103 = cast(%102, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %104 = multiply(%103, 0.03125f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %105 = transpose(%104, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %106 = add(%105, meta[relay.Constant][21] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %107 = multiply(%106, meta[relay.Constant][22] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %108 = add(%107, meta[relay.Constant][23] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %109 = nn.relu(%108) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %110 = transpose(%109, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %111 = multiply(%110, 32f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %112 = round(%111) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %113 = clip(%112, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %114 = cast(%113, dtype="int8") /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %115 = nn.conv2d(%114, meta[relay.Constant][24] /* ty=Tensor[(64, 64, 1, 1), int8] */ /* ty=Tensor[(64, 64, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], out_dtype="int32") /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %116 = add(%115, 64 /* ty=int32 */) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %117 = right_shift(%116, 7 /* ty=int32 */) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %118 = clip(%117, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %119 = cast(%118, dtype="int8") /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %120 = annotation.stop_fusion(%119) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %121 = cast(%120, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %122 = multiply(%121, 0.03125f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %123 = transpose(%122, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %124 = add(%123, meta[relay.Constant][25] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %125 = multiply(%124, meta[relay.Constant][26] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %126 = add(%125, meta[relay.Constant][27] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %127 = nn.relu(%126) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %128 = transpose(%127, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %129 = multiply(%128, 32f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %130 = round(%129) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %131 = clip(%130, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %132 = cast(%131, dtype="int8") /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %133 = nn.conv2d(%132, meta[relay.Constant][28] /* ty=Tensor[(64, 1, 3, 3), int8] */ /* ty=Tensor[(64, 1, 3, 3), int8] */, padding=[1, 1, 1, 1], groups=64, channels=64, kernel_size=[3, 3], out_dtype="int32") /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %134 = add(%133, 256 /* ty=int32 */) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %135 = right_shift(%134, 9 /* ty=int32 */) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %136 = clip(%135, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %137 = cast(%136, dtype="int8") /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %138 = annotation.stop_fusion(%137) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %139 = cast(%138, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %140 = multiply(%139, 0.03125f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %141 = transpose(%140, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %142 = add(%141, meta[relay.Constant][29] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %143 = multiply(%142, meta[relay.Constant][30] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %144 = add(%143, meta[relay.Constant][31] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %145 = nn.relu(%144) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %146 = transpose(%145, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %147 = multiply(%146, 32f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %148 = round(%147) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %149 = clip(%148, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %150 = cast(%149, dtype="int8") /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %151 = nn.conv2d(%150, meta[relay.Constant][32] /* ty=Tensor[(64, 64, 1, 1), int8] */ /* ty=Tensor[(64, 64, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], out_dtype="int32") /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %152 = add(%151, 64 /* ty=int32 */) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %153 = right_shift(%152, 7 /* ty=int32 */) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %154 = clip(%153, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 25, 5), int32] */;
  %155 = cast(%154, dtype="int8") /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %156 = annotation.stop_fusion(%155) /* ty=Tensor[(1, 64, 25, 5), int8] */;
  %157 = cast(%156, dtype="float32") /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %158 = multiply(%157, 0.03125f /* ty=float32 */) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %159 = transpose(%158, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %160 = add(%159, meta[relay.Constant][33] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %161 = multiply(%160, meta[relay.Constant][34] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %162 = add(%161, meta[relay.Constant][35] /* ty=Tensor[(64), float32] */ /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %163 = nn.relu(%162) /* ty=Tensor[(1, 25, 5, 64), float32] */;
  %164 = transpose(%163, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 64, 25, 5), float32] */;
  %165 = nn.avg_pool2d(%164, pool_size=[25, 5], strides=[2, 2]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %166 = transpose(%165, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %167 = squeeze(%166, axis=[1, 2]) /* ty=Tensor[(1, 64), float32] */;
  %168 = nn.dense(%167, meta[relay.Constant][36] /* ty=Tensor[(12, 64), float32] */ /* ty=Tensor[(12, 64), float32] */, units=12) /* ty=Tensor[(1, 12), float32] */;
  %169 = add(%168, meta[relay.Constant][37] /* ty=Tensor[(12), float32] */ /* ty=Tensor[(12), float32] */) /* ty=Tensor[(1, 12), float32] */;
  nn.softmax(%169) /* ty=Tensor[(1, 12), float32] */
}

METADATA:
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "StrMap", 
      "keys": [
        "relay.Constant"
      ], 
      "data": [2]
    }, 
    {
      "type_key": "Array", 
      "data": [
        3, 
        10, 
        14, 
        18, 
        22, 
        28, 
        32, 
        36, 
        40, 
        47, 
        51, 
        55, 
        59, 
        65, 
        69, 
        73, 
        77, 
        84, 
        88, 
        92, 
        96, 
        102, 
        106, 
        110, 
        114, 
        121, 
        125, 
        129, 
        133, 
        139, 
        143, 
        147, 
        151, 
        158, 
        162, 
        166, 
        170, 
        174
      ]
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "4", 
        "data": "0", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int8", 
        "shape": "5", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [6, 7, 8, 9]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "1"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "10"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "4"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "11", 
        "data": "1", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "12", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [13]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "15", 
        "data": "2", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "16", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [17]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "19", 
        "data": "3", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "20", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [21]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "23", 
        "data": "4", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int8", 
        "shape": "24", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [6, 25, 26, 27]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "1"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "3"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "3"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "29", 
        "data": "5", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "30", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [31]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "33", 
        "data": "6", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "34", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [35]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "37", 
        "data": "7", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "38", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [39]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "41", 
        "data": "8", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int8", 
        "shape": "42", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [43, 44, 45, 46]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "1"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "1"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "48", 
        "data": "9", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "49", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [50]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "52", 
        "data": "10", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "53", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [54]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "56", 
        "data": "11", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "57", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [58]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "60", 
        "data": "12", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int8", 
        "shape": "61", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [43, 62, 63, 64]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "1"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "3"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "3"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "66", 
        "data": "13", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "67", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [68]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "70", 
        "data": "14", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "71", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [72]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "74", 
        "data": "15", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "75", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [76]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "78", 
        "data": "16", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int8", 
        "shape": "79", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [80, 81, 82, 83]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "1"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "1"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "85", 
        "data": "17", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "86", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [87]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "89", 
        "data": "18", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "90", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [91]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "93", 
        "data": "19", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "94", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [95]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "97", 
        "data": "20", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int8", 
        "shape": "98", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [80, 99, 100, 101]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "1"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "3"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "3"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "103", 
        "data": "21", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "104", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [105]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "107", 
        "data": "22", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "108", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [109]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "111", 
        "data": "23", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "112", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [113]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "115", 
        "data": "24", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int8", 
        "shape": "116", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [117, 118, 119, 120]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "1"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "1"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "122", 
        "data": "25", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "123", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [124]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "126", 
        "data": "26", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "127", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [128]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "130", 
        "data": "27", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "131", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [132]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "134", 
        "data": "28", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int8", 
        "shape": "135", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [117, 136, 137, 138]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "1"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "3"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "3"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "140", 
        "data": "29", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "141", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [142]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "144", 
        "data": "30", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "145", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [146]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "148", 
        "data": "31", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "149", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [150]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "152", 
        "data": "32", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int8", 
        "shape": "153", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [154, 155, 156, 157]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "1"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "1"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "159", 
        "data": "33", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "160", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [161]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "163", 
        "data": "34", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "164", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [165]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "167", 
        "data": "35", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "168", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [169]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "171", 
        "data": "36", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "172", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [173, 154]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "12"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "175", 
        "data": "37", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "176", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [177]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "value": "12"
      }
    }
  ], 
  "b64ndarrays": [
    "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"
  ], 
  "attrs": {"tvm_version": "0.7.dev1"}
}