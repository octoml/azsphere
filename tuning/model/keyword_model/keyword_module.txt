def @main(%Mfcc: Tensor[(1, 49, 10), float32]) -> Tensor[(1, 12), float32] {
  %0 = reshape(%Mfcc, newshape=[-1, 490]) /* ty=Tensor[(1, 490), float32] */;
  %1 = reshape(%0, newshape=[-1, 49, 10, 1]) /* ty=Tensor[(1, 49, 10, 1), float32] */;
  %2 = multiply(%1, 32f /* ty=float32 */) /* ty=Tensor[(1, 49, 10, 1), float32] */;
  %3 = round(%2) /* ty=Tensor[(1, 49, 10, 1), float32] */;
  %4 = clip(%3, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 49, 10, 1), float32] */;
  %5 = cast(%4, dtype="int8") /* ty=Tensor[(1, 49, 10, 1), int8] */;
  %6 = nn.conv2d(%5, meta[relay.Constant][0] /* ty=Tensor[(10, 4, 1, 64), int8] */ /* ty=Tensor[(10, 4, 1, 64), int8] */, strides=[2, 2], padding=[4, 1, 5, 1], channels=64, kernel_size=[10, 4], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %7 = add(%6, meta[relay.Constant][1] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %8 = add(%7, 256 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %9 = right_shift(%8, 9 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %10 = clip(%9, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %11 = multiply(%10, meta[relay.Constant][2] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %12 = add(%11, meta[relay.Constant][3] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %13 = nn.relu(%12) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %14 = add(%13, 64 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %15 = right_shift(%14, 7 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %16 = clip(%15, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %17 = cast(%16, dtype="int8") /* ty=Tensor[(1, 25, 5, 64), int8] */;
  %18 = annotation.stop_fusion(%17) /* ty=Tensor[(1, 25, 5, 64), int8] */;
  %19 = nn.conv2d(%18, meta[relay.Constant][4] /* ty=Tensor[(3, 3, 64, 1), int8] */ /* ty=Tensor[(3, 3, 64, 1), int8] */, padding=[1, 1, 1, 1], groups=64, channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32") /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %20 = add(%19, meta[relay.Constant][5] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %21 = add(%20, 256 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %22 = right_shift(%21, 9 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %23 = clip(%22, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %24 = multiply(%23, meta[relay.Constant][6] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %25 = add(%24, meta[relay.Constant][7] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %26 = nn.relu(%25) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %27 = add(%26, 2 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %28 = right_shift(%27, 2 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %29 = clip(%28, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %30 = cast(%29, dtype="int8") /* ty=Tensor[(1, 25, 5, 64), int8] */;
  %31 = annotation.stop_fusion(%30) /* ty=Tensor[(1, 25, 5, 64), int8] */;
  %32 = nn.conv2d(%31, meta[relay.Constant][8] /* ty=Tensor[(1, 1, 64, 64), int8] */ /* ty=Tensor[(1, 1, 64, 64), int8] */, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %33 = add(%32, meta[relay.Constant][9] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %34 = add(%33, 128 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %35 = right_shift(%34, 8 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %36 = clip(%35, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %37 = multiply(%36, meta[relay.Constant][10] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %38 = add(%37, meta[relay.Constant][11] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %39 = nn.relu(%38) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %40 = add(%39, 32 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %41 = right_shift(%40, 6 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %42 = clip(%41, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %43 = cast(%42, dtype="int8") /* ty=Tensor[(1, 25, 5, 64), int8] */;
  %44 = annotation.stop_fusion(%43) /* ty=Tensor[(1, 25, 5, 64), int8] */;
  %45 = nn.conv2d(%44, meta[relay.Constant][12] /* ty=Tensor[(3, 3, 64, 1), int8] */ /* ty=Tensor[(3, 3, 64, 1), int8] */, padding=[1, 1, 1, 1], groups=64, channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32") /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %46 = add(%45, meta[relay.Constant][13] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %47 = add(%46, 128 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %48 = right_shift(%47, 8 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %49 = clip(%48, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %50 = multiply(%49, meta[relay.Constant][14] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %51 = add(%50, meta[relay.Constant][15] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %52 = nn.relu(%51) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %53 = add(%52, 2 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %54 = right_shift(%53, 2 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %55 = clip(%54, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %56 = cast(%55, dtype="int8") /* ty=Tensor[(1, 25, 5, 64), int8] */;
  %57 = annotation.stop_fusion(%56) /* ty=Tensor[(1, 25, 5, 64), int8] */;
  %58 = nn.conv2d(%57, meta[relay.Constant][16] /* ty=Tensor[(1, 1, 64, 64), int8] */ /* ty=Tensor[(1, 1, 64, 64), int8] */, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %59 = add(%58, meta[relay.Constant][17] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %60 = add(%59, 64 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %61 = right_shift(%60, 7 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %62 = clip(%61, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %63 = multiply(%62, meta[relay.Constant][18] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %64 = add(%63, meta[relay.Constant][19] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %65 = nn.relu(%64) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %66 = add(%65, 32 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %67 = right_shift(%66, 6 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %68 = clip(%67, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %69 = cast(%68, dtype="int8") /* ty=Tensor[(1, 25, 5, 64), int8] */;
  %70 = annotation.stop_fusion(%69) /* ty=Tensor[(1, 25, 5, 64), int8] */;
  %71 = nn.conv2d(%70, meta[relay.Constant][20] /* ty=Tensor[(3, 3, 64, 1), int8] */ /* ty=Tensor[(3, 3, 64, 1), int8] */, padding=[1, 1, 1, 1], groups=64, channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32") /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %72 = add(%71, meta[relay.Constant][21] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %73 = add(%72, 128 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %74 = right_shift(%73, 8 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %75 = clip(%74, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %76 = multiply(%75, meta[relay.Constant][22] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %77 = add(%76, meta[relay.Constant][23] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %78 = nn.relu(%77) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %79 = add(%78, 4 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %80 = right_shift(%79, 3 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %81 = clip(%80, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %82 = cast(%81, dtype="int8") /* ty=Tensor[(1, 25, 5, 64), int8] */;
  %83 = annotation.stop_fusion(%82) /* ty=Tensor[(1, 25, 5, 64), int8] */;
  %84 = nn.conv2d(%83, meta[relay.Constant][24] /* ty=Tensor[(1, 1, 64, 64), int8] */ /* ty=Tensor[(1, 1, 64, 64), int8] */, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %85 = add(%84, meta[relay.Constant][25] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %86 = add(%85, 64 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %87 = right_shift(%86, 7 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %88 = clip(%87, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %89 = multiply(%88, meta[relay.Constant][26] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %90 = add(%89, meta[relay.Constant][27] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %91 = nn.relu(%90) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %92 = add(%91, 32 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %93 = right_shift(%92, 6 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %94 = clip(%93, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %95 = cast(%94, dtype="int8") /* ty=Tensor[(1, 25, 5, 64), int8] */;
  %96 = annotation.stop_fusion(%95) /* ty=Tensor[(1, 25, 5, 64), int8] */;
  %97 = nn.conv2d(%96, meta[relay.Constant][28] /* ty=Tensor[(3, 3, 64, 1), int8] */ /* ty=Tensor[(3, 3, 64, 1), int8] */, padding=[1, 1, 1, 1], groups=64, channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32") /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %98 = add(%97, meta[relay.Constant][29] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %99 = add(%98, 256 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %100 = right_shift(%99, 9 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %101 = clip(%100, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %102 = multiply(%101, meta[relay.Constant][30] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %103 = add(%102, meta[relay.Constant][31] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %104 = nn.relu(%103) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %105 = add(%104, 2 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %106 = right_shift(%105, 2 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %107 = clip(%106, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %108 = cast(%107, dtype="int8") /* ty=Tensor[(1, 25, 5, 64), int8] */;
  %109 = annotation.stop_fusion(%108) /* ty=Tensor[(1, 25, 5, 64), int8] */;
  %110 = nn.conv2d(%109, meta[relay.Constant][32] /* ty=Tensor[(1, 1, 64, 64), int8] */ /* ty=Tensor[(1, 1, 64, 64), int8] */, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %111 = add(%110, meta[relay.Constant][33] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %112 = add(%111, 64 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %113 = right_shift(%112, 7 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %114 = clip(%113, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %115 = multiply(%114, meta[relay.Constant][34] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %116 = add(%115, meta[relay.Constant][35] /* ty=Tensor[(64), int32] */ /* ty=Tensor[(64), int32] */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %117 = nn.relu(%116) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %118 = add(%117, 16 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %119 = right_shift(%118, 5 /* ty=int32 */) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %120 = clip(%119, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %121 = cast(%120, dtype="int8") /* ty=Tensor[(1, 25, 5, 64), int8] */;
  %122 = annotation.stop_fusion(%121) /* ty=Tensor[(1, 25, 5, 64), int8] */;
  %123 = cast(%122, dtype="int32") /* ty=Tensor[(1, 25, 5, 64), int32] */;
  %124 = nn.avg_pool2d(%123, pool_size=[25, 5], strides=[2, 2], layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %125 = cast(%124, dtype="float32") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %126 = multiply(%125, 0.03125f /* ty=float32 */) /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %127 = squeeze(%126, axis=[1, 2]) /* ty=Tensor[(1, 64), float32] */;
  %128 = nn.dense(%127, meta[relay.Constant][36] /* ty=Tensor[(12, 64), float32] */ /* ty=Tensor[(12, 64), float32] */, units=12) /* ty=Tensor[(1, 12), float32] */;
  %129 = add(%128, meta[relay.Constant][37] /* ty=Tensor[(12), float32] */ /* ty=Tensor[(12), float32] */) /* ty=Tensor[(1, 12), float32] */;
  nn.softmax(%129) /* ty=Tensor[(1, 12), float32] */
}

// meta data omitted. you can use show_meta_data=True to include meta data